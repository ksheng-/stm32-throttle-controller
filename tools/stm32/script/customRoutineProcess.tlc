%%
%% CUSTOM_ROUTINE_PROCESS generates required files beyond the 
%% default RTW generated files.
%%
%% $ custom_routine_process.tlc 2014-04-17 dlange $
%% Main creation example :
%% Create MAIN (harness) for singlerate PIL system:
%selectfile NULL_FILE
%%Create sysTick_handler for Real Time appli. 
%<LibSetCodeTemplateComplianceLevel(1)>

%assign CodeFormat = "Embedded-C"

%%Get simulation type. 1= PIL or 0= not PIL
%assign  simMode = FEVAL("getpref","STM32","stm32PilMode")
%warning simMode value is %<simMode> 0:RTW 1:PIL 2:EXT


%if (ISEQUAL(simMode, 1))	
%%Create main.c for PIL
%warning Create main.c for PIL
	%assign cFile = LibCreateSourceFile("Source", "Custom", "main")
		
	%% Add corresponding System-Includes to the Includes-Section:
    %openfile main_Buf
	/* USER CODE BEGIN 0 */
		/* Add include files for PIL processing */
        #include <stdio.h>
		#include "pil_interface_lib.h"
        #include "rtwtypes.h"
		void profileTimerInit(void); 
	/* USER CODE END 0 */

    %closefile main_Buf
    %<LibSetSourceFileSection(cFile, "Includes", main_Buf)>

	%% Create calling syntax for the model initialization and step routine:
    %openfile main_Buf		
        int main (void)
        {
		/* USER CODE BEGIN 1 */
			/* avoid warnings about infinite loops */
			volatile int loop = 1;
			PIL_INTERFACE_LIB_ERROR_CODE errorCode = PIL_INTERFACE_LIB_SUCCESS;
		/* USER CODE END 1 */
			

		/* USER CODE BEGIN 2 */
			/* Systick configuration for Timer Profiling */
			if (SysTick_Config((uint32_t)(SystemCoreClock * 90e-3)))
			{  
				/* Capture error */ 
				while (1);
			}	
			/*Set reload timer to max value 0x00FFFFFF */
			/*Profiling settings */
			profileTimerInit();
			errorCode = pilInit(0,0);   
			if (errorCode != PIL_INTERFACE_LIB_SUCCESS) {
				/* trap error with infinite loop */
				while (loop) {
				}
			}			
		/* USER CODE END 2 */
		
		/* USER CODE BEGIN WHILE */	
            while(loop) {
				errorCode = pilRun();
				if ( (errorCode != PIL_INTERFACE_LIB_SUCCESS) && 
				(errorCode != PIL_INTERFACE_LIB_TERMINATE) ) {
					/* trap error with infinite loop */
					while (loop) {
					}
				}
            }		
		
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
			
		/* USER CODE END 3 */
        }    		
    %closefile main_Buf 
    %<LibSetSourceFileSection(cFile, "Functions", main_Buf)>
%elseif (ISEQUAL(simMode, 2))
%%Create main.c for external mode
%warning Create external mode application main.c
	%assign modelName = LibGetModelName()
    %assign SrcBaseName = LibGetMdlSrcBaseName()
	%assign cFile = LibCreateSourceFile("Source", "Custom", "main")
	%assign NbOfTasks = LibGetNumSyncPeriodicTasks()
%%	%assign NbOfTasks = LibGetNumTasks()
	
	%% Add corresponding System-Includes to the Includes-Section:
    %openfile main_Buf
 	/* USER CODE BEGIN 0 */
        #include <stdio.h>
		#include "%<LibGetMdlSrcBaseName()>.h" /* Model's header file */
        #include "rtwtypes.h"                  /* MathWorks types */
        #include "multiword_types.h"
        #include "ext_work.h"                  /* External mode header file */

		/* Real-time model */
//RP_MODIF		extern RT_MODEL_%<LibGetMdlSrcBaseName()> *const %<LibGetMdlSrcBaseName()>_M;

		/* Set which subrates need to run this base step (base rate always runs).*/
		/* Defined in %<LibGetMdlSrcBaseName()>.c file */
		extern void %<LibGetMdlSrcBaseName()>_SetEventsForThisBaseStep(boolean_T*);
		
		/* Flags for taskOverrun */
		static boolean_T OverrunFlags[%<NbOfTasks>];
		
		/* Number of auto reload timer rotation computed */
		static uint32_t autoReloadTimerLoopVal_S = 1;
		
		/* Remaining number of auto reload timer rotation to do */
		static uint32_t remainAutoReloadTimerLoopVal_S = 1;
	/* USER CODE END 0 */
		
		
    %closefile main_Buf
    %<LibSetSourceFileSection(cFile, "Includes", main_Buf)>

	%% Create calling syntax for the model initialization and step routine:
    %openfile main_Buf		
		
        /****************************************************
                     main function
		Example of main : 
			- Clock configuration
			- call Initialize 
			- Wait for systick (infinite loop)
        *****************************************************/
        int main (void)
        {
		/* USER CODE BEGIN 1 */
			/* Data initialization */
			int_T i;
			%if (%<NbOfTasks> > 1)
			boolean_T eventFlags[%<NbOfTasks>];    /* Model has %<NbOfTasks> rates */
			%endif
            boolean_T rtmStopReq = false;
		/* USER CODE END 1 */
			

		/* USER CODE BEGIN 2 */						
			/* Systick configuration and enable SysTickHandler interrupt */
			%assign FixedStep = FEVAL("getFixedStep","%<modelName>")
			%assign isNum = FEVAL("isnumeric","%<FixedStep>")
			
			%if (ISEQUAL("%<FixedStep>", "auto"))
			%assign FixedStep = 0.001
			%endif
			%if (ISEQUAL("%<isNum>", "0"))
			%assign FixedStep = FEVAL("evalin","base","%<FixedStep>")
			%endif
			
			if (SysTick_Config((uint32_t)(SystemCoreClock * %<FixedStep>)))
			{  
				autoReloadTimerLoopVal_S = 1;
				do {
					autoReloadTimerLoopVal_S++;
				} while((uint32_t)(SystemCoreClock * %<FixedStep>)/autoReloadTimerLoopVal_S > SysTick_LOAD_RELOAD_Msk);
				SysTick_Config((uint32_t)(SystemCoreClock * %<FixedStep>)/autoReloadTimerLoopVal_S);
			}	
			remainAutoReloadTimerLoopVal_S = autoReloadTimerLoopVal_S; //Set nb of loop to do			
		/* USER CODE END 2 */

		/* USER CODE BEGIN WHILE */	
		
			for(i=0;i<%<NbOfTasks>;i++) {
				OverrunFlags[i] = 0;
			}
			
			/* initialize external mode */
			rtParseArgsForExtMode(0, NULL);
			
			/* Model initialization call */
			%<SLibModelInitFcnName()>(%<SLibModelFcnArgs("Initialize",TLC_TRUE,"")>);

			
			/* External mode */
			rtSetTFinalForExtMode(&rtmGetTFinal(%<LibGetMdlSrcBaseName()>_M));
			rtExtModeCheckInit(1);

			rtExtModeWaitForStartPkt(%<LibGetMdlSrcBaseName()>_M->extModeInfo, 1, &rtmStopReq);
			if (rtmStopReq) {
				rtmSetStopRequested(%<LibGetMdlSrcBaseName()>_M, true);
			}

			rtERTExtModeStartMsg();
			
		
			/* Infinite loop */
			/* Real time from systickHandler */
			while(1) {
				/*Process tasks every solver time*/
				if(remainAutoReloadTimerLoopVal_S == 0) {
					remainAutoReloadTimerLoopVal_S = autoReloadTimerLoopVal_S;
					/* Check base rate for overrun */
					if (OverrunFlags[0]) {
						rtmSetErrorStatus(%<LibGetMdlSrcBaseName()>_M, "Overrun");						
					}
					OverrunFlags[0] = true;
					%if (%<NbOfTasks> > 1)
					/*
					* For a bare-board target (i.e., no operating system), the rates
					* that execute this base step are buffered locally to allow for
					* overlapping preemption.  The generated code includes function
					* writeCodeInfoFcn() which sets the rates
					* that need to run this time step.  The return values are 1 and 0
					* for true and false, respectively.
					*/
					%<LibGetMdlSrcBaseName()>_SetEventsForThisBaseStep(eventFlags);
					%endif
			
                    /* External mode */
                    rtmStopReq = false;
                    rtExtModeOneStep(%<LibGetMdlSrcBaseName()>_M->extModeInfo, 1, &rtmStopReq);
                    if (rtmStopReq) {
                        rtmSetStopRequested(%<LibGetMdlSrcBaseName()>_M, true);
                    }

					/* Step the model for base rate */
					%<LibCallModelStep(0)>			
					/* Indicate task for base rate complete */
					OverrunFlags[0] = false;

					%if (%<NbOfTasks> > 1)
					/* Step the model for any subrate */
					for (i = 1; i < %<NbOfTasks>; i++) {
						if (eventFlags[i]) {
							if (OverrunFlags[i]) {
								rtmSetErrorStatus(%<LibGetMdlSrcBaseName()>_M, "Overrun");								
							}
							OverrunFlags[i] = true;
							/* Step the model for subrate "i" */
							%<LibGetMdlSrcBaseName()>_step(i);
							/* Indicate task complete for sample time "i" */
							OverrunFlags[i] = false;
						}
					}	
					%endif			
				}	 				
			}
			
		/* USER CODE END WHILE */		

		/* USER CODE BEGIN 3 */			
		/* USER CODE END 3 */
			
        }        
    
	
		/* USER CODE BEGIN 4 */
		/****************************************************
					SysTick_Handler callback function
		This handler is called every tick and schedules tasks
		*****************************************************/
		void HAL_SYSTICK_Callback(void)
		{	
			/* For TIME OUT processing */
			HAL_IncTick();
			/* Manage nb of loop before interrupt has to be processed */			
			if( remainAutoReloadTimerLoopVal_S) {
				remainAutoReloadTimerLoopVal_S--;
			} 			
		}			
		/* USER CODE END 4 */	
	%closefile main_Buf 
    %<LibSetSourceFileSection(cFile, "Functions", main_Buf)>
%else
%%Create main.c for real time
%warning Create real-time application main.c
	%assign modelName = LibGetModelName()
    %assign SrcBaseName = LibGetMdlSrcBaseName()
	%assign cFile = LibCreateSourceFile("Source", "Custom", "main")
	%assign NbOfTasks = LibGetNumSyncPeriodicTasks()
%%	%assign NbOfTasks = LibGetNumTasks()
	
	%% Add corresponding System-Includes to the Includes-Section:
    %openfile main_Buf
 	/* USER CODE BEGIN 0 */
        #include <stdio.h>
		#include "%<LibGetMdlSrcBaseName()>.h" /* Model's header file */
        #include "rtwtypes.h"                  /* MathWorks types */
		
		/* Real-time model */
		extern RT_MODEL_%<LibGetMdlSrcBaseName()> *const %<LibGetMdlSrcBaseName()>_M;

		/* Set which subrates need to run this base step (base rate always runs).*/
		/* Defined in %<LibGetMdlSrcBaseName()>.c file */
		extern void %<LibGetMdlSrcBaseName()>_SetEventsForThisBaseStep(boolean_T*);
		
		/* Flags for taskOverrun */
		static boolean_T OverrunFlags[%<NbOfTasks>];
		
		/* Number of auto reload timer rotation computed */
		static uint32_t autoReloadTimerLoopVal_S = 1;
		
		/* Remaining number of auto reload timer rotation to do */
		static uint32_t remainAutoReloadTimerLoopVal_S = 1;
	/* USER CODE END 0 */
		
		
    %closefile main_Buf
    %<LibSetSourceFileSection(cFile, "Includes", main_Buf)>

	%% Create calling syntax for the model initialization and step routine:
    %openfile main_Buf		
		
        /****************************************************
                     main function
		Example of main : 
			- Clock configuration
			- call Initialize 
			- Wait for systick (infinite loop)
        *****************************************************/
        int main (void)
        {
		/* USER CODE BEGIN 1 */
			/* Data initialization */
			int_T i;
			%if (%<NbOfTasks> > 1)
			boolean_T eventFlags[%<NbOfTasks>];    /* Model has %<NbOfTasks> rates */
			%endif
		/* USER CODE END 1 */
			

		/* USER CODE BEGIN 2 */						
			/* Systick configuration and enable SysTickHandler interrupt */
			%assign FixedStep = FEVAL("getFixedStep","%<modelName>")
			%assign isNum = FEVAL("isnumeric","%<FixedStep>")
			
			%if (ISEQUAL("%<FixedStep>", "auto"))
			%assign FixedStep = 0.001
			%endif
			%if (ISEQUAL("%<isNum>", "0"))
			%assign FixedStep = FEVAL("evalin","base","%<FixedStep>")
			%endif
			
			if (SysTick_Config((uint32_t)(SystemCoreClock * %<FixedStep>)))
			{  
				autoReloadTimerLoopVal_S = 1;
				do {
					autoReloadTimerLoopVal_S++;
				} while((uint32_t)(SystemCoreClock * %<FixedStep>)/autoReloadTimerLoopVal_S > SysTick_LOAD_RELOAD_Msk);
				SysTick_Config((uint32_t)(SystemCoreClock * %<FixedStep>)/autoReloadTimerLoopVal_S);
			}	
			remainAutoReloadTimerLoopVal_S = autoReloadTimerLoopVal_S; //Set nb of loop to do			
		/* USER CODE END 2 */

		/* USER CODE BEGIN WHILE */	
		
			for(i=0;i<%<NbOfTasks>;i++) {
				OverrunFlags[i] = 0;
			}
			/* Model initialization call */
			%<SLibModelInitFcnName()>(%<SLibModelFcnArgs("Initialize",TLC_TRUE,"")>);
			
			/* Infinite loop */
			/* Real time from systickHandler */
			while(1) {
				/*Process tasks every solver time*/
				if(remainAutoReloadTimerLoopVal_S == 0) {
					remainAutoReloadTimerLoopVal_S = autoReloadTimerLoopVal_S;
					/* Check base rate for overrun */
					if (OverrunFlags[0]) {
						rtmSetErrorStatus(%<LibGetMdlSrcBaseName()>_M, "Overrun");						
					}
					OverrunFlags[0] = true;
					%if (%<NbOfTasks> > 1)
					/*
					* For a bare-board target (i.e., no operating system), the rates
					* that execute this base step are buffered locally to allow for
					* overlapping preemption.  The generated code includes function
					* writeCodeInfoFcn() which sets the rates
					* that need to run this time step.  The return values are 1 and 0
					* for true and false, respectively.
					*/
					%<LibGetMdlSrcBaseName()>_SetEventsForThisBaseStep(eventFlags);
					%endif
			
					/* Step the model for base rate */
					%<LibCallModelStep(0)>			
					/* Indicate task for base rate complete */
					OverrunFlags[0] = false;

					%if (%<NbOfTasks> > 1)
					/* Step the model for any subrate */
					for (i = 1; i < %<NbOfTasks>; i++) {
						if (eventFlags[i]) {
							if (OverrunFlags[i]) {
								rtmSetErrorStatus(%<LibGetMdlSrcBaseName()>_M, "Overrun");								
							}
							OverrunFlags[i] = true;
							/* Step the model for subrate "i" */
							%<LibGetMdlSrcBaseName()>_step(i);
							/* Indicate task complete for sample time "i" */
							OverrunFlags[i] = false;
						}
					}	
					%endif	
				}	 				
			}
			
		/* USER CODE END WHILE */		

		/* USER CODE BEGIN 3 */			
		/* USER CODE END 3 */
			
        }        
    
	
		/* USER CODE BEGIN 4 */
		/****************************************************
					SysTick_Handler callback function
		This handler is called every tick and schedules tasks
		*****************************************************/
		void HAL_SYSTICK_Callback(void)
		{	
			/* For TIME OUT processing */
			HAL_IncTick();
			/* Manage nb of loop before interrupt has to be processed */			
			if( remainAutoReloadTimerLoopVal_S) {
				remainAutoReloadTimerLoopVal_S--;
			} 			
		}			
		/* USER CODE END 4 */	
	%closefile main_Buf 
    %<LibSetSourceFileSection(cFile, "Functions", main_Buf)>
%endif

%% EOF: custom_routine_process.tlc


















